// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package models

import (
	"context"
)

const addCustomer = `-- name: AddCustomer :one
INSERT INTO customers (
    name, gender, birthDate, birthPlace, province, regency, district, village, address, citizen_id, passport_id, passport_exp, citizen_card, passport, family_card, photo, room_type, travel_pkg
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18
)
RETURNING id, name, gender, birthdate, birthplace, province, regency, district, village, address, citizen_id, passport_id, passport_exp, citizen_card, passport, family_card, photo, room_type, travel_pkg
`

type AddCustomerParams struct {
	Name        string
	Gender      string
	Birthdate   string
	Birthplace  string
	Province    string
	Regency     string
	District    string
	Village     string
	Address     string
	CitizenID   string
	PassportID  string
	PassportExp string
	CitizenCard string
	Passport    string
	FamilyCard  string
	Photo       string
	RoomType    string
	TravelPkg   string
}

func (q *Queries) AddCustomer(ctx context.Context, arg AddCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, addCustomer,
		arg.Name,
		arg.Gender,
		arg.Birthdate,
		arg.Birthplace,
		arg.Province,
		arg.Regency,
		arg.District,
		arg.Village,
		arg.Address,
		arg.CitizenID,
		arg.PassportID,
		arg.PassportExp,
		arg.CitizenCard,
		arg.Passport,
		arg.FamilyCard,
		arg.Photo,
		arg.RoomType,
		arg.TravelPkg,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Gender,
		&i.Birthdate,
		&i.Birthplace,
		&i.Province,
		&i.Regency,
		&i.District,
		&i.Village,
		&i.Address,
		&i.CitizenID,
		&i.PassportID,
		&i.PassportExp,
		&i.CitizenCard,
		&i.Passport,
		&i.FamilyCard,
		&i.Photo,
		&i.RoomType,
		&i.TravelPkg,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers
WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCustomer, id)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, name, gender, birthdate, birthplace, province, regency, district, village, address, citizen_id, passport_id, passport_exp, citizen_card, passport, family_card, photo, room_type, travel_pkg FROM customers
WHERE id = $1
`

func (q *Queries) GetCustomer(ctx context.Context, id int32) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Gender,
		&i.Birthdate,
		&i.Birthplace,
		&i.Province,
		&i.Regency,
		&i.District,
		&i.Village,
		&i.Address,
		&i.CitizenID,
		&i.PassportID,
		&i.PassportExp,
		&i.CitizenCard,
		&i.Passport,
		&i.FamilyCard,
		&i.Photo,
		&i.RoomType,
		&i.TravelPkg,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, password, role FROM users 
WHERE email = $1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, name, province, travel_pkg, room_type 
FROM customers
`

type ListCustomersRow struct {
	ID        int32
	Name      string
	Province  string
	TravelPkg string
	RoomType  string
}

func (q *Queries) ListCustomers(ctx context.Context) ([]ListCustomersRow, error) {
	rows, err := q.db.Query(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCustomersRow
	for rows.Next() {
		var i ListCustomersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Province,
			&i.TravelPkg,
			&i.RoomType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE customers 
SET 
    name = $2,
    gender = $3,
    birthDate = $4,
    birthPlace = $5,
    province = $6,
    regency = $7,
    district = $8,
    village = $9,
    address = $10,
    citizen_id = $11,
    passport_id = $12,
    passport_exp = $13,
    citizen_card = $14,
    passport = $15,
    family_card = $16,
    photo = $17,
    room_type = $18,
    travel_pkg = $19
WHERE id = $1
`

type UpdateCustomerParams struct {
	ID          int32
	Name        string
	Gender      string
	Birthdate   string
	Birthplace  string
	Province    string
	Regency     string
	District    string
	Village     string
	Address     string
	CitizenID   string
	PassportID  string
	PassportExp string
	CitizenCard string
	Passport    string
	FamilyCard  string
	Photo       string
	RoomType    string
	TravelPkg   string
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.Exec(ctx, updateCustomer,
		arg.ID,
		arg.Name,
		arg.Gender,
		arg.Birthdate,
		arg.Birthplace,
		arg.Province,
		arg.Regency,
		arg.District,
		arg.Village,
		arg.Address,
		arg.CitizenID,
		arg.PassportID,
		arg.PassportExp,
		arg.CitizenCard,
		arg.Passport,
		arg.FamilyCard,
		arg.Photo,
		arg.RoomType,
		arg.TravelPkg,
	)
	return err
}
